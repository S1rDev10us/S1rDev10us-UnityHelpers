using UnityEngine;
{%- set_global coords = ["0","1","x","y","z","w"] -%}
{%- set_global vectorTypes = [2,3,4] -%}

{#- specialCases comes from data file -#}

{% macro getVar(var, first=false) -%}
  {%- set_global coords = ["0","1","x","y","z","w"] -%}
  {%- set_global vectorTypes = [2,3,4] -%}
  {%- set literals = coords | slice(end=2) -%}
  {%- if literals is containing(var) -%}
    {{var}}
  {%- else -%}
    vec.{{var}}
  {%- endif -%}
{%- endmacro getVar -%}

{%- macro render(coords, iVec, oVec, specialCases) -%}
  {%- set coordString = coords | join(sep="") %}
  {%- set isSpecialCase = specialCases is containing(coordString) %}
  public static {{ oVec }} _{{ coordString }}(this {{ iVec }} vec) {
    return {% if isSpecialCase -%}
      {{ specialCases[coordString] }}
    {%- else -%}
      new {{ oVec }}(
        {%- for coord in coords -%}
          {%- if not loop.first -%}
            , {% endif -%}
          {{- self::getVar(var=coord) -}}
        {%- endfor -%}
      )
    {%- endif -%};
  }
{%- endmacro render %}

namespace S1rDev10us.UnityHelpers.ExtensionMethods{
  {%- for inVectorType in vectorTypes %}
    {%- set iVec = "Vector" ~ inVectorType %}
  public static class {{iVec}}Swizzles {
      {%- for outVectorType in vectorTypes %}
        {%- set oVec = "Vector" ~ outVectorType %}
    #region {{iVec}} -> {{oVec}}
          {%- for c1 in coords | slice(end=inVectorType+2) %}
            {%- for c2 in coords | slice(end=inVectorType+2) %}
              {%- if outVectorType == 2 %}
                {%- set currentCoords = [c1, c2] %}
                {{- self::render(coords=currentCoords,iVec=iVec,oVec=oVec,specialCases=specialCases) | indent()}}
              {%- else %}
                {%- for c3 in coords | slice(end=inVectorType+2) %}
                  {%- if outVectorType == 3 %}
                    {%- set currentCoords = [c1, c2, c3] %}
                    {{- self::render(coords=currentCoords,iVec=iVec,oVec=oVec,specialCases=specialCases) | indent()}}
                  {%- else %}
                    {%- for c4 in coords | slice(end=inVectorType+2) %}
                        {%- set currentCoords = [c1, c2, c3, c4] %}
                        {{- self::render(coords=currentCoords,iVec=iVec,oVec=oVec,specialCases=specialCases) | indent()}}
                    {%- endfor %}
                  {%- endif %}
                {%- endfor %}
              {%- endif %}
            {%- endfor %}
          {%- endfor %}
    #endregion
  {% endfor -%}
  }
  {%- endfor %}
}
